// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vector_tile.proto
// Protobuf Java Version: 4.31.1

package io.tileverse.vectortile.mvt;

/**
 * Not this class was generated with the {@literal io.github.ascopes:protobuf-maven-plugin}
 * for the protobuf "Lite" profile, but copied from {@code target/generated-sources} to comment out
 * the generated {@code newBuilder()} methods that cause errors like
 * {@literal Cannot cast from GeneratedMessageLite.Builder<GeneratedMessageLite<GeneratedMessageLite<MessageType2,GeneratedMessageLite.Builder<MessageType2,BuilderType2>>,GeneratedMessageLite.Builder<GeneratedMessageLite<MessageType2,BuilderType2>,BuilderType2>>,GeneratedMessageLite.Builder<GeneratedMessageLite<GeneratedMessageLite<MessageType2,BuilderType2>,BuilderType2>,BuilderType2>> to VectorTile.Tile.Value.Builder}
 * and replace them by working methods, like in:
 * <pre>{@code
 *   //    public static Builder newBuilder() {
 *   //      return (Builder) DEFAULT_INSTANCE.createBuilder();
 *   //    }
 *       public static Builder newBuilder() {
 *         return DEFAULT_INSTANCE.createBuilder();
 *       }
 *}</pre>
 */
@com.google.protobuf.Generated
final class VectorTileProto {
    private VectorTileProto() {}

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {}

    public interface TileOrBuilder
            extends
            // @@protoc_insertion_point(interface_extends:io.tileverse.vectortile.mvt.Tile)
            com.google.protobuf.GeneratedMessageLite.ExtendableMessageOrBuilder<Tile, Tile.Builder> {

        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> getLayersList();
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer getLayers(int index);
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        int getLayersCount();
    }
    /**
     * Protobuf type {@code io.tileverse.vectortile.mvt.Tile}
     */
    public static final class Tile
            extends com.google.protobuf.GeneratedMessageLite.ExtendableMessage<Tile, Tile.Builder>
            implements
            // @@protoc_insertion_point(message_implements:io.tileverse.vectortile.mvt.Tile)
            TileOrBuilder {
        private Tile() {
            layers_ = emptyProtobufList();
        }
        /**
         * <pre>
         * GeomType is described in section 4.3.4 of the specification
         * </pre>
         *
         * Protobuf enum {@code io.tileverse.vectortile.mvt.Tile.GeomType}
         */
        public enum GeomType implements com.google.protobuf.Internal.EnumLite {
            /**
             * <code>UNKNOWN = 0;</code>
             */
            UNKNOWN(0),
            /**
             * <code>POINT = 1;</code>
             */
            POINT(1),
            /**
             * <code>LINESTRING = 2;</code>
             */
            LINESTRING(2),
            /**
             * <code>POLYGON = 3;</code>
             */
            POLYGON(3),
            ;

            /**
             * <code>UNKNOWN = 0;</code>
             */
            public static final int UNKNOWN_VALUE = 0;
            /**
             * <code>POINT = 1;</code>
             */
            public static final int POINT_VALUE = 1;
            /**
             * <code>LINESTRING = 2;</code>
             */
            public static final int LINESTRING_VALUE = 2;
            /**
             * <code>POLYGON = 3;</code>
             */
            public static final int POLYGON_VALUE = 3;

            @java.lang.Override
            public final int getNumber() {
                return value;
            }

            /**
             * @param value The number of the enum to look for.
             * @return The enum associated with the given number.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static GeomType valueOf(int value) {
                return forNumber(value);
            }

            public static GeomType forNumber(int value) {
                switch (value) {
                    case 0:
                        return UNKNOWN;
                    case 1:
                        return POINT;
                    case 2:
                        return LINESTRING;
                    case 3:
                        return POLYGON;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<GeomType> internalGetValueMap() {
                return internalValueMap;
            }

            private static final com.google.protobuf.Internal.EnumLiteMap<GeomType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<GeomType>() {
                        @java.lang.Override
                        public GeomType findValueByNumber(int number) {
                            return GeomType.forNumber(number);
                        }
                    };

            public static com.google.protobuf.Internal.EnumVerifier internalGetVerifier() {
                return GeomTypeVerifier.INSTANCE;
            }

            private static final class GeomTypeVerifier implements com.google.protobuf.Internal.EnumVerifier {
                static final com.google.protobuf.Internal.EnumVerifier INSTANCE = new GeomTypeVerifier();

                @java.lang.Override
                public boolean isInRange(int number) {
                    return GeomType.forNumber(number) != null;
                }
            }
            ;

            private final int value;

            private GeomType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:io.tileverse.vectortile.mvt.Tile.GeomType)
        }

        public interface ValueOrBuilder
                extends
                // @@protoc_insertion_point(interface_extends:io.tileverse.vectortile.mvt.Tile.Value)
                com.google.protobuf.GeneratedMessageLite.ExtendableMessageOrBuilder<Value, Value.Builder> {

            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @return Whether the stringValue field is set.
             */
            boolean hasStringValue();
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @return The stringValue.
             */
            java.lang.String getStringValue();
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @return The bytes for stringValue.
             */
            com.google.protobuf.ByteString getStringValueBytes();

            /**
             * <code>optional float float_value = 2;</code>
             * @return Whether the floatValue field is set.
             */
            boolean hasFloatValue();
            /**
             * <code>optional float float_value = 2;</code>
             * @return The floatValue.
             */
            float getFloatValue();

            /**
             * <code>optional double double_value = 3;</code>
             * @return Whether the doubleValue field is set.
             */
            boolean hasDoubleValue();
            /**
             * <code>optional double double_value = 3;</code>
             * @return The doubleValue.
             */
            double getDoubleValue();

            /**
             * <code>optional int64 int_value = 4;</code>
             * @return Whether the intValue field is set.
             */
            boolean hasIntValue();
            /**
             * <code>optional int64 int_value = 4;</code>
             * @return The intValue.
             */
            long getIntValue();

            /**
             * <code>optional uint64 uint_value = 5;</code>
             * @return Whether the uintValue field is set.
             */
            boolean hasUintValue();
            /**
             * <code>optional uint64 uint_value = 5;</code>
             * @return The uintValue.
             */
            long getUintValue();

            /**
             * <code>optional sint64 sint_value = 6;</code>
             * @return Whether the sintValue field is set.
             */
            boolean hasSintValue();
            /**
             * <code>optional sint64 sint_value = 6;</code>
             * @return The sintValue.
             */
            long getSintValue();

            /**
             * <code>optional bool bool_value = 7;</code>
             * @return Whether the boolValue field is set.
             */
            boolean hasBoolValue();
            /**
             * <code>optional bool bool_value = 7;</code>
             * @return The boolValue.
             */
            boolean getBoolValue();
        }
        /**
         * <pre>
         * Variant type encoding
         * The use of values is described in section 4.1 of the specification
         * </pre>
         *
         * Protobuf type {@code io.tileverse.vectortile.mvt.Tile.Value}
         */
        public static final class Value
                extends com.google.protobuf.GeneratedMessageLite.ExtendableMessage<Value, Value.Builder>
                implements
                // @@protoc_insertion_point(message_implements:io.tileverse.vectortile.mvt.Tile.Value)
                ValueOrBuilder {
            private Value() {
                stringValue_ = "";
            }

            private int bitField0_;
            public static final int STRING_VALUE_FIELD_NUMBER = 1;
            private java.lang.String stringValue_;
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @return Whether the stringValue field is set.
             */
            @java.lang.Override
            public boolean hasStringValue() {
                return ((bitField0_ & 0x00000001) != 0);
            }
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @return The stringValue.
             */
            @java.lang.Override
            public java.lang.String getStringValue() {
                return stringValue_;
            }
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @return The bytes for stringValue.
             */
            @java.lang.Override
            public com.google.protobuf.ByteString getStringValueBytes() {
                return com.google.protobuf.ByteString.copyFromUtf8(stringValue_);
            }
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @param value The stringValue to set.
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void setStringValue(java.lang.String value) {
                value.getClass(); // minimal bytecode null check
                bitField0_ |= 0x00000001;
                stringValue_ = value;
            }
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             */
            private void clearStringValue() {
                bitField0_ = (bitField0_ & ~0x00000001);
                stringValue_ = getDefaultInstance().getStringValue();
            }
            /**
             * <pre>
             * Exactly one of these values must be present in a valid message
             * </pre>
             *
             * <code>optional string string_value = 1;</code>
             * @param value The bytes for stringValue to set.
             */
            private void setStringValueBytes(com.google.protobuf.ByteString value) {
                stringValue_ = value.toStringUtf8();
                bitField0_ |= 0x00000001;
            }

            public static final int FLOAT_VALUE_FIELD_NUMBER = 2;
            private float floatValue_;
            /**
             * <code>optional float float_value = 2;</code>
             * @return Whether the floatValue field is set.
             */
            @java.lang.Override
            public boolean hasFloatValue() {
                return ((bitField0_ & 0x00000002) != 0);
            }
            /**
             * <code>optional float float_value = 2;</code>
             * @return The floatValue.
             */
            @java.lang.Override
            public float getFloatValue() {
                return floatValue_;
            }
            /**
             * <code>optional float float_value = 2;</code>
             * @param value The floatValue to set.
             */
            private void setFloatValue(float value) {
                bitField0_ |= 0x00000002;
                floatValue_ = value;
            }
            /**
             * <code>optional float float_value = 2;</code>
             */
            private void clearFloatValue() {
                bitField0_ = (bitField0_ & ~0x00000002);
                floatValue_ = 0F;
            }

            public static final int DOUBLE_VALUE_FIELD_NUMBER = 3;
            private double doubleValue_;
            /**
             * <code>optional double double_value = 3;</code>
             * @return Whether the doubleValue field is set.
             */
            @java.lang.Override
            public boolean hasDoubleValue() {
                return ((bitField0_ & 0x00000004) != 0);
            }
            /**
             * <code>optional double double_value = 3;</code>
             * @return The doubleValue.
             */
            @java.lang.Override
            public double getDoubleValue() {
                return doubleValue_;
            }
            /**
             * <code>optional double double_value = 3;</code>
             * @param value The doubleValue to set.
             */
            private void setDoubleValue(double value) {
                bitField0_ |= 0x00000004;
                doubleValue_ = value;
            }
            /**
             * <code>optional double double_value = 3;</code>
             */
            private void clearDoubleValue() {
                bitField0_ = (bitField0_ & ~0x00000004);
                doubleValue_ = 0D;
            }

            public static final int INT_VALUE_FIELD_NUMBER = 4;
            private long intValue_;
            /**
             * <code>optional int64 int_value = 4;</code>
             * @return Whether the intValue field is set.
             */
            @java.lang.Override
            public boolean hasIntValue() {
                return ((bitField0_ & 0x00000008) != 0);
            }
            /**
             * <code>optional int64 int_value = 4;</code>
             * @return The intValue.
             */
            @java.lang.Override
            public long getIntValue() {
                return intValue_;
            }
            /**
             * <code>optional int64 int_value = 4;</code>
             * @param value The intValue to set.
             */
            private void setIntValue(long value) {
                bitField0_ |= 0x00000008;
                intValue_ = value;
            }
            /**
             * <code>optional int64 int_value = 4;</code>
             */
            private void clearIntValue() {
                bitField0_ = (bitField0_ & ~0x00000008);
                intValue_ = 0L;
            }

            public static final int UINT_VALUE_FIELD_NUMBER = 5;
            private long uintValue_;
            /**
             * <code>optional uint64 uint_value = 5;</code>
             * @return Whether the uintValue field is set.
             */
            @java.lang.Override
            public boolean hasUintValue() {
                return ((bitField0_ & 0x00000010) != 0);
            }
            /**
             * <code>optional uint64 uint_value = 5;</code>
             * @return The uintValue.
             */
            @java.lang.Override
            public long getUintValue() {
                return uintValue_;
            }
            /**
             * <code>optional uint64 uint_value = 5;</code>
             * @param value The uintValue to set.
             */
            private void setUintValue(long value) {
                bitField0_ |= 0x00000010;
                uintValue_ = value;
            }
            /**
             * <code>optional uint64 uint_value = 5;</code>
             */
            private void clearUintValue() {
                bitField0_ = (bitField0_ & ~0x00000010);
                uintValue_ = 0L;
            }

            public static final int SINT_VALUE_FIELD_NUMBER = 6;
            private long sintValue_;
            /**
             * <code>optional sint64 sint_value = 6;</code>
             * @return Whether the sintValue field is set.
             */
            @java.lang.Override
            public boolean hasSintValue() {
                return ((bitField0_ & 0x00000020) != 0);
            }
            /**
             * <code>optional sint64 sint_value = 6;</code>
             * @return The sintValue.
             */
            @java.lang.Override
            public long getSintValue() {
                return sintValue_;
            }
            /**
             * <code>optional sint64 sint_value = 6;</code>
             * @param value The sintValue to set.
             */
            private void setSintValue(long value) {
                bitField0_ |= 0x00000020;
                sintValue_ = value;
            }
            /**
             * <code>optional sint64 sint_value = 6;</code>
             */
            private void clearSintValue() {
                bitField0_ = (bitField0_ & ~0x00000020);
                sintValue_ = 0L;
            }

            public static final int BOOL_VALUE_FIELD_NUMBER = 7;
            private boolean boolValue_;
            /**
             * <code>optional bool bool_value = 7;</code>
             * @return Whether the boolValue field is set.
             */
            @java.lang.Override
            public boolean hasBoolValue() {
                return ((bitField0_ & 0x00000040) != 0);
            }
            /**
             * <code>optional bool bool_value = 7;</code>
             * @return The boolValue.
             */
            @java.lang.Override
            public boolean getBoolValue() {
                return boolValue_;
            }
            /**
             * <code>optional bool bool_value = 7;</code>
             * @param value The boolValue to set.
             */
            private void setBoolValue(boolean value) {
                bitField0_ |= 0x00000040;
                boolValue_ = value;
            }
            /**
             * <code>optional bool bool_value = 7;</code>
             */
            private void clearBoolValue() {
                bitField0_ = (bitField0_ & ~0x00000040);
                boolValue_ = false;
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(java.nio.ByteBuffer data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseDelimitedFrom(
                    java.io.InputStream input) throws java.io.IOException {
                return parseDelimitedFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseDelimitedFrom(
                    java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    com.google.protobuf.CodedInputStream input) throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            //      public static Builder newBuilder() {
            //        return (Builder) DEFAULT_INSTANCE.createBuilder();
            //      }
            public static Value.Builder newBuilder() {
                return DEFAULT_INSTANCE.createBuilder();
            }

            public static Builder newBuilder(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value prototype) {
                return DEFAULT_INSTANCE.createBuilder(prototype);
            }

            /**
             * <pre>
             * Variant type encoding
             * The use of values is described in section 4.1 of the specification
             * </pre>
             *
             * Protobuf type {@code io.tileverse.vectortile.mvt.Tile.Value}
             */
            public static final class Builder
                    extends com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value, Builder>
                    implements
                    // @@protoc_insertion_point(builder_implements:io.tileverse.vectortile.mvt.Tile.Value)
                    io.tileverse.vectortile.mvt.VectorTileProto.Tile.ValueOrBuilder {
                // Construct using io.tileverse.vectortile.mvt.VectorTile.Tile.Value.newBuilder()
                private Builder() {
                    super(DEFAULT_INSTANCE);
                }

                /**
                 * <pre>
                 * Exactly one of these values must be present in a valid message
                 * </pre>
                 *
                 * <code>optional string string_value = 1;</code>
                 * @return Whether the stringValue field is set.
                 */
                @java.lang.Override
                public boolean hasStringValue() {
                    return instance.hasStringValue();
                }
                /**
                 * <pre>
                 * Exactly one of these values must be present in a valid message
                 * </pre>
                 *
                 * <code>optional string string_value = 1;</code>
                 * @return The stringValue.
                 */
                @java.lang.Override
                public java.lang.String getStringValue() {
                    return instance.getStringValue();
                }
                /**
                 * <pre>
                 * Exactly one of these values must be present in a valid message
                 * </pre>
                 *
                 * <code>optional string string_value = 1;</code>
                 * @return The bytes for stringValue.
                 */
                @java.lang.Override
                public com.google.protobuf.ByteString getStringValueBytes() {
                    return instance.getStringValueBytes();
                }
                /**
                 * <pre>
                 * Exactly one of these values must be present in a valid message
                 * </pre>
                 *
                 * <code>optional string string_value = 1;</code>
                 * @param value The stringValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setStringValue(java.lang.String value) {
                    copyOnWrite();
                    instance.setStringValue(value);
                    return this;
                }
                /**
                 * <pre>
                 * Exactly one of these values must be present in a valid message
                 * </pre>
                 *
                 * <code>optional string string_value = 1;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearStringValue() {
                    copyOnWrite();
                    instance.clearStringValue();
                    return this;
                }
                /**
                 * <pre>
                 * Exactly one of these values must be present in a valid message
                 * </pre>
                 *
                 * <code>optional string string_value = 1;</code>
                 * @param value The bytes for stringValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setStringValueBytes(com.google.protobuf.ByteString value) {
                    copyOnWrite();
                    instance.setStringValueBytes(value);
                    return this;
                }

                /**
                 * <code>optional float float_value = 2;</code>
                 * @return Whether the floatValue field is set.
                 */
                @java.lang.Override
                public boolean hasFloatValue() {
                    return instance.hasFloatValue();
                }
                /**
                 * <code>optional float float_value = 2;</code>
                 * @return The floatValue.
                 */
                @java.lang.Override
                public float getFloatValue() {
                    return instance.getFloatValue();
                }
                /**
                 * <code>optional float float_value = 2;</code>
                 * @param value The floatValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setFloatValue(float value) {
                    copyOnWrite();
                    instance.setFloatValue(value);
                    return this;
                }
                /**
                 * <code>optional float float_value = 2;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearFloatValue() {
                    copyOnWrite();
                    instance.clearFloatValue();
                    return this;
                }

                /**
                 * <code>optional double double_value = 3;</code>
                 * @return Whether the doubleValue field is set.
                 */
                @java.lang.Override
                public boolean hasDoubleValue() {
                    return instance.hasDoubleValue();
                }
                /**
                 * <code>optional double double_value = 3;</code>
                 * @return The doubleValue.
                 */
                @java.lang.Override
                public double getDoubleValue() {
                    return instance.getDoubleValue();
                }
                /**
                 * <code>optional double double_value = 3;</code>
                 * @param value The doubleValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setDoubleValue(double value) {
                    copyOnWrite();
                    instance.setDoubleValue(value);
                    return this;
                }
                /**
                 * <code>optional double double_value = 3;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearDoubleValue() {
                    copyOnWrite();
                    instance.clearDoubleValue();
                    return this;
                }

                /**
                 * <code>optional int64 int_value = 4;</code>
                 * @return Whether the intValue field is set.
                 */
                @java.lang.Override
                public boolean hasIntValue() {
                    return instance.hasIntValue();
                }
                /**
                 * <code>optional int64 int_value = 4;</code>
                 * @return The intValue.
                 */
                @java.lang.Override
                public long getIntValue() {
                    return instance.getIntValue();
                }
                /**
                 * <code>optional int64 int_value = 4;</code>
                 * @param value The intValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setIntValue(long value) {
                    copyOnWrite();
                    instance.setIntValue(value);
                    return this;
                }
                /**
                 * <code>optional int64 int_value = 4;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearIntValue() {
                    copyOnWrite();
                    instance.clearIntValue();
                    return this;
                }

                /**
                 * <code>optional uint64 uint_value = 5;</code>
                 * @return Whether the uintValue field is set.
                 */
                @java.lang.Override
                public boolean hasUintValue() {
                    return instance.hasUintValue();
                }
                /**
                 * <code>optional uint64 uint_value = 5;</code>
                 * @return The uintValue.
                 */
                @java.lang.Override
                public long getUintValue() {
                    return instance.getUintValue();
                }
                /**
                 * <code>optional uint64 uint_value = 5;</code>
                 * @param value The uintValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setUintValue(long value) {
                    copyOnWrite();
                    instance.setUintValue(value);
                    return this;
                }
                /**
                 * <code>optional uint64 uint_value = 5;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearUintValue() {
                    copyOnWrite();
                    instance.clearUintValue();
                    return this;
                }

                /**
                 * <code>optional sint64 sint_value = 6;</code>
                 * @return Whether the sintValue field is set.
                 */
                @java.lang.Override
                public boolean hasSintValue() {
                    return instance.hasSintValue();
                }
                /**
                 * <code>optional sint64 sint_value = 6;</code>
                 * @return The sintValue.
                 */
                @java.lang.Override
                public long getSintValue() {
                    return instance.getSintValue();
                }
                /**
                 * <code>optional sint64 sint_value = 6;</code>
                 * @param value The sintValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setSintValue(long value) {
                    copyOnWrite();
                    instance.setSintValue(value);
                    return this;
                }
                /**
                 * <code>optional sint64 sint_value = 6;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearSintValue() {
                    copyOnWrite();
                    instance.clearSintValue();
                    return this;
                }

                /**
                 * <code>optional bool bool_value = 7;</code>
                 * @return Whether the boolValue field is set.
                 */
                @java.lang.Override
                public boolean hasBoolValue() {
                    return instance.hasBoolValue();
                }
                /**
                 * <code>optional bool bool_value = 7;</code>
                 * @return The boolValue.
                 */
                @java.lang.Override
                public boolean getBoolValue() {
                    return instance.getBoolValue();
                }
                /**
                 * <code>optional bool bool_value = 7;</code>
                 * @param value The boolValue to set.
                 * @return This builder for chaining.
                 */
                public Builder setBoolValue(boolean value) {
                    copyOnWrite();
                    instance.setBoolValue(value);
                    return this;
                }
                /**
                 * <code>optional bool bool_value = 7;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearBoolValue() {
                    copyOnWrite();
                    instance.clearBoolValue();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:io.tileverse.vectortile.mvt.Tile.Value)
            }

            private byte memoizedIsInitialized = 2;

            @java.lang.Override
            @java.lang.SuppressWarnings({"ThrowNull"})
            protected final java.lang.Object dynamicMethod(
                    com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                    java.lang.Object arg0,
                    java.lang.Object arg1) {
                switch (method) {
                    case NEW_MUTABLE_INSTANCE: {
                        return new io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value();
                    }
                    case NEW_BUILDER: {
                        return new Builder();
                    }
                    case BUILD_MESSAGE_INFO: {
                        java.lang.Object[] objects = new java.lang.Object[] {
                            "bitField0_",
                            "stringValue_",
                            "floatValue_",
                            "doubleValue_",
                            "intValue_",
                            "uintValue_",
                            "sintValue_",
                            "boolValue_",
                        };
                        java.lang.String info =
                                "\u0001\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0000\u0000\u0001\u1008\u0000\u0002"
                                        + "\u1001\u0001\u0003\u1000\u0002\u0004\u1002\u0003\u0005\u1003\u0004\u0006\u1010\u0005"
                                        + "\u0007\u1007\u0006";
                        return newMessageInfo(DEFAULT_INSTANCE, info, objects);
                    }
                    case GET_DEFAULT_INSTANCE: {
                        return DEFAULT_INSTANCE;
                    }
                    case GET_PARSER: {
                        com.google.protobuf.Parser<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> parser =
                                PARSER;
                        if (parser == null) {
                            synchronized (io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value.class) {
                                parser = PARSER;
                                if (parser == null) {
                                    parser = new DefaultInstanceBasedParser<
                                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value>(DEFAULT_INSTANCE);
                                    PARSER = parser;
                                }
                            }
                        }
                        return parser;
                    }
                    case GET_MEMOIZED_IS_INITIALIZED: {
                        return memoizedIsInitialized;
                    }
                    case SET_MEMOIZED_IS_INITIALIZED: {
                        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
                        return null;
                    }
                }
                // Should never happen. Generates tight code to throw an exception.
                throw null;
            }

            // @@protoc_insertion_point(class_scope:io.tileverse.vectortile.mvt.Tile.Value)
            private static final io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value DEFAULT_INSTANCE;

            static {
                Value defaultInstance = new Value();
                // New instances are implicitly immutable so no need to make
                // immutable.
                DEFAULT_INSTANCE = defaultInstance;
                com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(Value.class, defaultInstance);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static volatile com.google.protobuf.Parser<Value> PARSER;

            public static com.google.protobuf.Parser<Value> parser() {
                return DEFAULT_INSTANCE.getParserForType();
            }
        }

        public interface FeatureOrBuilder
                extends
                // @@protoc_insertion_point(interface_extends:io.tileverse.vectortile.mvt.Tile.Feature)
                com.google.protobuf.MessageLiteOrBuilder {

            /**
             * <code>optional uint64 id = 1 [default = 0];</code>
             * @return Whether the id field is set.
             */
            boolean hasId();
            /**
             * <code>optional uint64 id = 1 [default = 0];</code>
             * @return The id.
             */
            long getId();

            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @return A list containing the tags.
             */
            java.util.List<java.lang.Integer> getTagsList();
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @return The count of tags.
             */
            int getTagsCount();
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @param index The index of the element to return.
             * @return The tags at the given index.
             */
            int getTags(int index);

            /**
             * <pre>
             * The type of geometry stored in this feature.
             * </pre>
             *
             * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
             * @return Whether the type field is set.
             */
            boolean hasType();
            /**
             * <pre>
             * The type of geometry stored in this feature.
             * </pre>
             *
             * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
             * @return The type.
             */
            io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType getType();

            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @return A list containing the geometry.
             */
            java.util.List<java.lang.Integer> getGeometryList();
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @return The count of geometry.
             */
            int getGeometryCount();
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @param index The index of the element to return.
             * @return The geometry at the given index.
             */
            int getGeometry(int index);
        }
        /**
         * <pre>
         * Features are described in section 4.2 of the specification
         * </pre>
         *
         * Protobuf type {@code io.tileverse.vectortile.mvt.Tile.Feature}
         */
        public static final class Feature extends com.google.protobuf.GeneratedMessageLite<Feature, Feature.Builder>
                implements
                // @@protoc_insertion_point(message_implements:io.tileverse.vectortile.mvt.Tile.Feature)
                FeatureOrBuilder {
            private Feature() {
                tags_ = emptyIntList();
                geometry_ = emptyIntList();
            }

            private int bitField0_;
            public static final int ID_FIELD_NUMBER = 1;
            private long id_;
            /**
             * <code>optional uint64 id = 1 [default = 0];</code>
             * @return Whether the id field is set.
             */
            @java.lang.Override
            public boolean hasId() {
                return ((bitField0_ & 0x00000001) != 0);
            }
            /**
             * <code>optional uint64 id = 1 [default = 0];</code>
             * @return The id.
             */
            @java.lang.Override
            public long getId() {
                return id_;
            }
            /**
             * <code>optional uint64 id = 1 [default = 0];</code>
             * @param value The id to set.
             */
            private void setId(long value) {
                bitField0_ |= 0x00000001;
                id_ = value;
            }
            /**
             * <code>optional uint64 id = 1 [default = 0];</code>
             */
            private void clearId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                id_ = 0L;
            }

            public static final int TAGS_FIELD_NUMBER = 2;
            private com.google.protobuf.Internal.IntList tags_;
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @return A list containing the tags.
             */
            @java.lang.Override
            public java.util.List<java.lang.Integer> getTagsList() {
                return tags_;
            }
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @return The count of tags.
             */
            @java.lang.Override
            public int getTagsCount() {
                return tags_.size();
            }
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @param index The index of the element to return.
             * @return The tags at the given index.
             */
            @java.lang.Override
            public int getTags(int index) {
                return tags_.getInt(index);
            }

            private int tagsMemoizedSerializedSize = -1;

            private void ensureTagsIsMutable() {
                com.google.protobuf.Internal.IntList tmp = tags_;
                if (!tmp.isModifiable()) {
                    tags_ = com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
                }
            }
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @param index The index to set the value at.
             * @param value The tags to set.
             */
            private void setTags(int index, int value) {
                ensureTagsIsMutable();
                tags_.setInt(index, value);
            }
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @param value The tags to add.
             */
            private void addTags(int value) {
                ensureTagsIsMutable();
                tags_.addInt(value);
            }
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             * @param values The tags to add.
             */
            private void addAllTags(java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureTagsIsMutable();
                com.google.protobuf.AbstractMessageLite.addAll(values, tags_);
            }
            /**
             * <pre>
             * Tags of this feature are encoded as repeated pairs of
             * integers.
             * A detailed description of tags is located in sections
             * 4.2 and 4.4 of the specification
             * </pre>
             *
             * <code>repeated uint32 tags = 2 [packed = true];</code>
             */
            private void clearTags() {
                tags_ = emptyIntList();
            }

            public static final int TYPE_FIELD_NUMBER = 3;
            private int type_;
            /**
             * <pre>
             * The type of geometry stored in this feature.
             * </pre>
             *
             * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
             * @return Whether the type field is set.
             */
            @java.lang.Override
            public boolean hasType() {
                return ((bitField0_ & 0x00000002) != 0);
            }
            /**
             * <pre>
             * The type of geometry stored in this feature.
             * </pre>
             *
             * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
             * @return The type.
             */
            @java.lang.Override
            public io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType getType() {
                io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType result =
                        io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType.forNumber(type_);
                return result == null ? io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType.UNKNOWN : result;
            }
            /**
             * <pre>
             * The type of geometry stored in this feature.
             * </pre>
             *
             * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
             * @param value The type to set.
             */
            private void setType(io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType value) {
                type_ = value.getNumber();
                bitField0_ |= 0x00000002;
            }
            /**
             * <pre>
             * The type of geometry stored in this feature.
             * </pre>
             *
             * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
             */
            private void clearType() {
                bitField0_ = (bitField0_ & ~0x00000002);
                type_ = 0;
            }

            public static final int GEOMETRY_FIELD_NUMBER = 4;
            private com.google.protobuf.Internal.IntList geometry_;
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @return A list containing the geometry.
             */
            @java.lang.Override
            public java.util.List<java.lang.Integer> getGeometryList() {
                return geometry_;
            }
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @return The count of geometry.
             */
            @java.lang.Override
            public int getGeometryCount() {
                return geometry_.size();
            }
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @param index The index of the element to return.
             * @return The geometry at the given index.
             */
            @java.lang.Override
            public int getGeometry(int index) {
                return geometry_.getInt(index);
            }

            private int geometryMemoizedSerializedSize = -1;

            private void ensureGeometryIsMutable() {
                com.google.protobuf.Internal.IntList tmp = geometry_;
                if (!tmp.isModifiable()) {
                    geometry_ = com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
                }
            }
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @param index The index to set the value at.
             * @param value The geometry to set.
             */
            private void setGeometry(int index, int value) {
                ensureGeometryIsMutable();
                geometry_.setInt(index, value);
            }
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @param value The geometry to add.
             */
            private void addGeometry(int value) {
                ensureGeometryIsMutable();
                geometry_.addInt(value);
            }
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             * @param values The geometry to add.
             */
            private void addAllGeometry(java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureGeometryIsMutable();
                com.google.protobuf.AbstractMessageLite.addAll(values, geometry_);
            }
            /**
             * <pre>
             * Contains a stream of commands and parameters (vertices).
             * A detailed description on geometry encoding is located in
             * section 4.3 of the specification.
             * </pre>
             *
             * <code>repeated uint32 geometry = 4 [packed = true];</code>
             */
            private void clearGeometry() {
                geometry_ = emptyIntList();
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(java.nio.ByteBuffer data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseDelimitedFrom(
                    java.io.InputStream input) throws java.io.IOException {
                return parseDelimitedFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseDelimitedFrom(
                    java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    com.google.protobuf.CodedInputStream input) throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            //      public static Builder newBuilder() {
            //        return (Builder) DEFAULT_INSTANCE.createBuilder();
            //      }
            public static Feature.Builder newBuilder() {
                return DEFAULT_INSTANCE.createBuilder();
            }

            public static Builder newBuilder(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature prototype) {
                return DEFAULT_INSTANCE.createBuilder(prototype);
            }

            /**
             * <pre>
             * Features are described in section 4.2 of the specification
             * </pre>
             *
             * Protobuf type {@code io.tileverse.vectortile.mvt.Tile.Feature}
             */
            public static final class Builder
                    extends com.google.protobuf.GeneratedMessageLite.Builder<
                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature, Builder>
                    implements
                    // @@protoc_insertion_point(builder_implements:io.tileverse.vectortile.mvt.Tile.Feature)
                    io.tileverse.vectortile.mvt.VectorTileProto.Tile.FeatureOrBuilder {
                // Construct using io.tileverse.vectortile.mvt.VectorTile.Tile.Feature.newBuilder()
                private Builder() {
                    super(DEFAULT_INSTANCE);
                }

                /**
                 * <code>optional uint64 id = 1 [default = 0];</code>
                 * @return Whether the id field is set.
                 */
                @java.lang.Override
                public boolean hasId() {
                    return instance.hasId();
                }
                /**
                 * <code>optional uint64 id = 1 [default = 0];</code>
                 * @return The id.
                 */
                @java.lang.Override
                public long getId() {
                    return instance.getId();
                }
                /**
                 * <code>optional uint64 id = 1 [default = 0];</code>
                 * @param value The id to set.
                 * @return This builder for chaining.
                 */
                public Builder setId(long value) {
                    copyOnWrite();
                    instance.setId(value);
                    return this;
                }
                /**
                 * <code>optional uint64 id = 1 [default = 0];</code>
                 * @return This builder for chaining.
                 */
                public Builder clearId() {
                    copyOnWrite();
                    instance.clearId();
                    return this;
                }

                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @return A list containing the tags.
                 */
                @java.lang.Override
                public java.util.List<java.lang.Integer> getTagsList() {
                    return java.util.Collections.unmodifiableList(instance.getTagsList());
                }
                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @return The count of tags.
                 */
                @java.lang.Override
                public int getTagsCount() {
                    return instance.getTagsCount();
                }
                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @param index The index of the element to return.
                 * @return The tags at the given index.
                 */
                @java.lang.Override
                public int getTags(int index) {
                    return instance.getTags(index);
                }
                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @param value The tags to set.
                 * @return This builder for chaining.
                 */
                public Builder setTags(int index, int value) {
                    copyOnWrite();
                    instance.setTags(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @param value The tags to add.
                 * @return This builder for chaining.
                 */
                public Builder addTags(int value) {
                    copyOnWrite();
                    instance.addTags(value);
                    return this;
                }
                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @param values The tags to add.
                 * @return This builder for chaining.
                 */
                public Builder addAllTags(java.lang.Iterable<? extends java.lang.Integer> values) {
                    copyOnWrite();
                    instance.addAllTags(values);
                    return this;
                }
                /**
                 * <pre>
                 * Tags of this feature are encoded as repeated pairs of
                 * integers.
                 * A detailed description of tags is located in sections
                 * 4.2 and 4.4 of the specification
                 * </pre>
                 *
                 * <code>repeated uint32 tags = 2 [packed = true];</code>
                 * @return This builder for chaining.
                 */
                public Builder clearTags() {
                    copyOnWrite();
                    instance.clearTags();
                    return this;
                }

                /**
                 * <pre>
                 * The type of geometry stored in this feature.
                 * </pre>
                 *
                 * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
                 * @return Whether the type field is set.
                 */
                @java.lang.Override
                public boolean hasType() {
                    return instance.hasType();
                }
                /**
                 * <pre>
                 * The type of geometry stored in this feature.
                 * </pre>
                 *
                 * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
                 * @return The type.
                 */
                @java.lang.Override
                public io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType getType() {
                    return instance.getType();
                }
                /**
                 * <pre>
                 * The type of geometry stored in this feature.
                 * </pre>
                 *
                 * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
                 * @param value The enum numeric value on the wire for type to set.
                 * @return This builder for chaining.
                 */
                public Builder setType(io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType value) {
                    copyOnWrite();
                    instance.setType(value);
                    return this;
                }
                /**
                 * <pre>
                 * The type of geometry stored in this feature.
                 * </pre>
                 *
                 * <code>optional .io.tileverse.vectortile.mvt.Tile.GeomType type = 3 [default = UNKNOWN];</code>
                 * @return This builder for chaining.
                 */
                public Builder clearType() {
                    copyOnWrite();
                    instance.clearType();
                    return this;
                }

                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @return A list containing the geometry.
                 */
                @java.lang.Override
                public java.util.List<java.lang.Integer> getGeometryList() {
                    return java.util.Collections.unmodifiableList(instance.getGeometryList());
                }
                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @return The count of geometry.
                 */
                @java.lang.Override
                public int getGeometryCount() {
                    return instance.getGeometryCount();
                }
                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @param index The index of the element to return.
                 * @return The geometry at the given index.
                 */
                @java.lang.Override
                public int getGeometry(int index) {
                    return instance.getGeometry(index);
                }
                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @param value The geometry to set.
                 * @return This builder for chaining.
                 */
                public Builder setGeometry(int index, int value) {
                    copyOnWrite();
                    instance.setGeometry(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @param value The geometry to add.
                 * @return This builder for chaining.
                 */
                public Builder addGeometry(int value) {
                    copyOnWrite();
                    instance.addGeometry(value);
                    return this;
                }
                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @param values The geometry to add.
                 * @return This builder for chaining.
                 */
                public Builder addAllGeometry(java.lang.Iterable<? extends java.lang.Integer> values) {
                    copyOnWrite();
                    instance.addAllGeometry(values);
                    return this;
                }
                /**
                 * <pre>
                 * Contains a stream of commands and parameters (vertices).
                 * A detailed description on geometry encoding is located in
                 * section 4.3 of the specification.
                 * </pre>
                 *
                 * <code>repeated uint32 geometry = 4 [packed = true];</code>
                 * @return This builder for chaining.
                 */
                public Builder clearGeometry() {
                    copyOnWrite();
                    instance.clearGeometry();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:io.tileverse.vectortile.mvt.Tile.Feature)
            }

            @java.lang.Override
            @java.lang.SuppressWarnings({"ThrowNull"})
            protected final java.lang.Object dynamicMethod(
                    com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                    java.lang.Object arg0,
                    java.lang.Object arg1) {
                switch (method) {
                    case NEW_MUTABLE_INSTANCE: {
                        return new io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature();
                    }
                    case NEW_BUILDER: {
                        return new Builder();
                    }
                    case BUILD_MESSAGE_INFO: {
                        java.lang.Object[] objects = new java.lang.Object[] {
                            "bitField0_",
                            "id_",
                            "tags_",
                            "type_",
                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.GeomType.internalGetVerifier(),
                            "geometry_",
                        };
                        java.lang.String info =
                                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0002\u0000\u0001\u1003\u0000\u0002"
                                        + "+\u0003\u180c\u0001\u0004+";
                        return newMessageInfo(DEFAULT_INSTANCE, info, objects);
                    }
                    case GET_DEFAULT_INSTANCE: {
                        return DEFAULT_INSTANCE;
                    }
                    case GET_PARSER: {
                        com.google.protobuf.Parser<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature> parser =
                                PARSER;
                        if (parser == null) {
                            synchronized (io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature.class) {
                                parser = PARSER;
                                if (parser == null) {
                                    parser = new DefaultInstanceBasedParser<
                                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature>(DEFAULT_INSTANCE);
                                    PARSER = parser;
                                }
                            }
                        }
                        return parser;
                    }
                    case GET_MEMOIZED_IS_INITIALIZED: {
                        return (byte) 1;
                    }
                    // SET_MEMOIZED_IS_INITIALIZED is never called for this message.
                    // So it can do anything. Combine with default case for smaller codegen.
                    case SET_MEMOIZED_IS_INITIALIZED:
                }
                // Should never happen. Generates tight code to throw an exception.
                throw null;
            }

            // @@protoc_insertion_point(class_scope:io.tileverse.vectortile.mvt.Tile.Feature)
            private static final io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature DEFAULT_INSTANCE;

            static {
                Feature defaultInstance = new Feature();
                // New instances are implicitly immutable so no need to make
                // immutable.
                DEFAULT_INSTANCE = defaultInstance;
                com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(Feature.class, defaultInstance);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static volatile com.google.protobuf.Parser<Feature> PARSER;

            public static com.google.protobuf.Parser<Feature> parser() {
                return DEFAULT_INSTANCE.getParserForType();
            }
        }

        public interface LayerOrBuilder
                extends
                // @@protoc_insertion_point(interface_extends:io.tileverse.vectortile.mvt.Tile.Layer)
                com.google.protobuf.GeneratedMessageLite.ExtendableMessageOrBuilder<Layer, Layer.Builder> {

            /**
             * <pre>
             * Any compliant implementation must first read the version
             * number encoded in this message and choose the correct
             * implementation for this version number before proceeding to
             * decode other parts of this message.
             * </pre>
             *
             * <code>required uint32 version = 15 [default = 1];</code>
             * @return Whether the version field is set.
             */
            boolean hasVersion();
            /**
             * <pre>
             * Any compliant implementation must first read the version
             * number encoded in this message and choose the correct
             * implementation for this version number before proceeding to
             * decode other parts of this message.
             * </pre>
             *
             * <code>required uint32 version = 15 [default = 1];</code>
             * @return The version.
             */
            int getVersion();

            /**
             * <code>required string name = 1;</code>
             * @return Whether the name field is set.
             */
            boolean hasName();
            /**
             * <code>required string name = 1;</code>
             * @return The name.
             */
            java.lang.String getName();
            /**
             * <code>required string name = 1;</code>
             * @return The bytes for name.
             */
            com.google.protobuf.ByteString getNameBytes();

            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature> getFeaturesList();
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature getFeatures(int index);
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            int getFeaturesCount();

            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @return A list containing the keys.
             */
            java.util.List<java.lang.String> getKeysList();
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @return The count of keys.
             */
            int getKeysCount();
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param index The index of the element to return.
             * @return The keys at the given index.
             */
            java.lang.String getKeys(int index);
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param index The index of the element to return.
             * @return The keys at the given index.
             */
            com.google.protobuf.ByteString getKeysBytes(int index);

            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> getValuesList();
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value getValues(int index);
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            int getValuesCount();

            /**
             * <pre>
             * Although this is an "optional" field it is required by the specification.
             * See https://github.com/mapbox/vector-tile-spec/issues/47
             * </pre>
             *
             * <code>optional uint32 extent = 5 [default = 4096];</code>
             * @return Whether the extent field is set.
             */
            boolean hasExtent();
            /**
             * <pre>
             * Although this is an "optional" field it is required by the specification.
             * See https://github.com/mapbox/vector-tile-spec/issues/47
             * </pre>
             *
             * <code>optional uint32 extent = 5 [default = 4096];</code>
             * @return The extent.
             */
            int getExtent();
        }
        /**
         * <pre>
         * Layers are described in section 4.1 of the specification
         * </pre>
         *
         * Protobuf type {@code io.tileverse.vectortile.mvt.Tile.Layer}
         */
        public static final class Layer
                extends com.google.protobuf.GeneratedMessageLite.ExtendableMessage<Layer, Layer.Builder>
                implements
                // @@protoc_insertion_point(message_implements:io.tileverse.vectortile.mvt.Tile.Layer)
                LayerOrBuilder {
            private Layer() {
                version_ = 1;
                name_ = "";
                features_ = emptyProtobufList();
                keys_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
                values_ = emptyProtobufList();
                extent_ = 4096;
            }

            private int bitField0_;
            public static final int VERSION_FIELD_NUMBER = 15;
            private int version_;
            /**
             * <pre>
             * Any compliant implementation must first read the version
             * number encoded in this message and choose the correct
             * implementation for this version number before proceeding to
             * decode other parts of this message.
             * </pre>
             *
             * <code>required uint32 version = 15 [default = 1];</code>
             * @return Whether the version field is set.
             */
            @java.lang.Override
            public boolean hasVersion() {
                return ((bitField0_ & 0x00000001) != 0);
            }
            /**
             * <pre>
             * Any compliant implementation must first read the version
             * number encoded in this message and choose the correct
             * implementation for this version number before proceeding to
             * decode other parts of this message.
             * </pre>
             *
             * <code>required uint32 version = 15 [default = 1];</code>
             * @return The version.
             */
            @java.lang.Override
            public int getVersion() {
                return version_;
            }
            /**
             * <pre>
             * Any compliant implementation must first read the version
             * number encoded in this message and choose the correct
             * implementation for this version number before proceeding to
             * decode other parts of this message.
             * </pre>
             *
             * <code>required uint32 version = 15 [default = 1];</code>
             * @param value The version to set.
             */
            private void setVersion(int value) {
                bitField0_ |= 0x00000001;
                version_ = value;
            }
            /**
             * <pre>
             * Any compliant implementation must first read the version
             * number encoded in this message and choose the correct
             * implementation for this version number before proceeding to
             * decode other parts of this message.
             * </pre>
             *
             * <code>required uint32 version = 15 [default = 1];</code>
             */
            private void clearVersion() {
                bitField0_ = (bitField0_ & ~0x00000001);
                version_ = 1;
            }

            public static final int NAME_FIELD_NUMBER = 1;
            private java.lang.String name_;
            /**
             * <code>required string name = 1;</code>
             * @return Whether the name field is set.
             */
            @java.lang.Override
            public boolean hasName() {
                return ((bitField0_ & 0x00000002) != 0);
            }
            /**
             * <code>required string name = 1;</code>
             * @return The name.
             */
            @java.lang.Override
            public java.lang.String getName() {
                return name_;
            }
            /**
             * <code>required string name = 1;</code>
             * @return The bytes for name.
             */
            @java.lang.Override
            public com.google.protobuf.ByteString getNameBytes() {
                return com.google.protobuf.ByteString.copyFromUtf8(name_);
            }
            /**
             * <code>required string name = 1;</code>
             * @param value The name to set.
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void setName(java.lang.String value) {
                value.getClass(); // minimal bytecode null check
                bitField0_ |= 0x00000002;
                name_ = value;
            }
            /**
             * <code>required string name = 1;</code>
             */
            private void clearName() {
                bitField0_ = (bitField0_ & ~0x00000002);
                name_ = getDefaultInstance().getName();
            }
            /**
             * <code>required string name = 1;</code>
             * @param value The bytes for name to set.
             */
            private void setNameBytes(com.google.protobuf.ByteString value) {
                name_ = value.toStringUtf8();
                bitField0_ |= 0x00000002;
            }

            public static final int FEATURES_FIELD_NUMBER = 2;
            private com.google.protobuf.Internal.ProtobufList<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature>
                    features_;
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            @java.lang.Override
            public java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature> getFeaturesList() {
                return features_;
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            public java.util.List<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.FeatureOrBuilder>
                    getFeaturesOrBuilderList() {
                return features_;
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            @java.lang.Override
            public int getFeaturesCount() {
                return features_.size();
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            @java.lang.Override
            public io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature getFeatures(int index) {
                return features_.get(index);
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            public io.tileverse.vectortile.mvt.VectorTileProto.Tile.FeatureOrBuilder getFeaturesOrBuilder(int index) {
                return features_.get(index);
            }

            private void ensureFeaturesIsMutable() {
                com.google.protobuf.Internal.ProtobufList<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature>
                        tmp = features_;
                if (!tmp.isModifiable()) {
                    features_ = com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
                }
            }

            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void setFeatures(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature value) {
                value.getClass(); // minimal bytecode null check
                ensureFeaturesIsMutable();
                features_.set(index, value);
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void addFeatures(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature value) {
                value.getClass(); // minimal bytecode null check
                ensureFeaturesIsMutable();
                features_.add(value);
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void addFeatures(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature value) {
                value.getClass(); // minimal bytecode null check
                ensureFeaturesIsMutable();
                features_.add(index, value);
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            private void addAllFeatures(
                    java.lang.Iterable<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature> values) {
                ensureFeaturesIsMutable();
                com.google.protobuf.AbstractMessageLite.addAll(values, features_);
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            private void clearFeatures() {
                features_ = emptyProtobufList();
            }
            /**
             * <pre>
             * The actual features in this tile.
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
             */
            private void removeFeatures(int index) {
                ensureFeaturesIsMutable();
                features_.remove(index);
            }

            public static final int KEYS_FIELD_NUMBER = 3;
            private com.google.protobuf.Internal.ProtobufList<java.lang.String> keys_;
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @return A list containing the keys.
             */
            @java.lang.Override
            public java.util.List<java.lang.String> getKeysList() {
                return keys_;
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @return The count of keys.
             */
            @java.lang.Override
            public int getKeysCount() {
                return keys_.size();
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param index The index of the element to return.
             * @return The keys at the given index.
             */
            @java.lang.Override
            public java.lang.String getKeys(int index) {
                return keys_.get(index);
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param index The index of the value to return.
             * @return The bytes of the keys at the given index.
             */
            @java.lang.Override
            public com.google.protobuf.ByteString getKeysBytes(int index) {
                return com.google.protobuf.ByteString.copyFromUtf8(keys_.get(index));
            }

            private void ensureKeysIsMutable() {
                com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp = keys_;
                if (!tmp.isModifiable()) {
                    keys_ = com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
                }
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param index The index to set the value at.
             * @param value The keys to set.
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void setKeys(int index, java.lang.String value) {
                value.getClass(); // minimal bytecode null check
                ensureKeysIsMutable();
                keys_.set(index, value);
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param value The keys to add.
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void addKeys(java.lang.String value) {
                value.getClass(); // minimal bytecode null check
                ensureKeysIsMutable();
                keys_.add(value);
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param values The keys to add.
             */
            private void addAllKeys(java.lang.Iterable<java.lang.String> values) {
                ensureKeysIsMutable();
                com.google.protobuf.AbstractMessageLite.addAll(values, keys_);
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             */
            private void clearKeys() {
                keys_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
            }
            /**
             * <pre>
             * Dictionary encoding for keys
             * </pre>
             *
             * <code>repeated string keys = 3;</code>
             * @param value The bytes of the keys to add.
             */
            private void addKeysBytes(com.google.protobuf.ByteString value) {
                ensureKeysIsMutable();
                keys_.add(value.toStringUtf8());
            }

            public static final int VALUES_FIELD_NUMBER = 4;
            private com.google.protobuf.Internal.ProtobufList<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value>
                    values_;
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            @java.lang.Override
            public java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> getValuesList() {
                return values_;
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            public java.util.List<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.ValueOrBuilder>
                    getValuesOrBuilderList() {
                return values_;
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            @java.lang.Override
            public int getValuesCount() {
                return values_.size();
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            @java.lang.Override
            public io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value getValues(int index) {
                return values_.get(index);
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            public io.tileverse.vectortile.mvt.VectorTileProto.Tile.ValueOrBuilder getValuesOrBuilder(int index) {
                return values_.get(index);
            }

            private void ensureValuesIsMutable() {
                com.google.protobuf.Internal.ProtobufList<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> tmp =
                        values_;
                if (!tmp.isModifiable()) {
                    values_ = com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
                }
            }

            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void setValues(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value value) {
                value.getClass(); // minimal bytecode null check
                ensureValuesIsMutable();
                values_.set(index, value);
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void addValues(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value value) {
                value.getClass(); // minimal bytecode null check
                ensureValuesIsMutable();
                values_.add(value);
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            @java.lang.SuppressWarnings("ReturnValueIgnored")
            private void addValues(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value value) {
                value.getClass(); // minimal bytecode null check
                ensureValuesIsMutable();
                values_.add(index, value);
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            private void addAllValues(
                    java.lang.Iterable<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> values) {
                ensureValuesIsMutable();
                com.google.protobuf.AbstractMessageLite.addAll(values, values_);
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            private void clearValues() {
                values_ = emptyProtobufList();
            }
            /**
             * <pre>
             * Dictionary encoding for values
             * </pre>
             *
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
             */
            private void removeValues(int index) {
                ensureValuesIsMutable();
                values_.remove(index);
            }

            public static final int EXTENT_FIELD_NUMBER = 5;
            private int extent_;
            /**
             * <pre>
             * Although this is an "optional" field it is required by the specification.
             * See https://github.com/mapbox/vector-tile-spec/issues/47
             * </pre>
             *
             * <code>optional uint32 extent = 5 [default = 4096];</code>
             * @return Whether the extent field is set.
             */
            @java.lang.Override
            public boolean hasExtent() {
                return ((bitField0_ & 0x00000004) != 0);
            }
            /**
             * <pre>
             * Although this is an "optional" field it is required by the specification.
             * See https://github.com/mapbox/vector-tile-spec/issues/47
             * </pre>
             *
             * <code>optional uint32 extent = 5 [default = 4096];</code>
             * @return The extent.
             */
            @java.lang.Override
            public int getExtent() {
                return extent_;
            }
            /**
             * <pre>
             * Although this is an "optional" field it is required by the specification.
             * See https://github.com/mapbox/vector-tile-spec/issues/47
             * </pre>
             *
             * <code>optional uint32 extent = 5 [default = 4096];</code>
             * @param value The extent to set.
             */
            private void setExtent(int value) {
                bitField0_ |= 0x00000004;
                extent_ = value;
            }
            /**
             * <pre>
             * Although this is an "optional" field it is required by the specification.
             * See https://github.com/mapbox/vector-tile-spec/issues/47
             * </pre>
             *
             * <code>optional uint32 extent = 5 [default = 4096];</code>
             */
            private void clearExtent() {
                bitField0_ = (bitField0_ & ~0x00000004);
                extent_ = 4096;
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(java.nio.ByteBuffer data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseDelimitedFrom(
                    java.io.InputStream input) throws java.io.IOException {
                return parseDelimitedFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseDelimitedFrom(
                    java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    com.google.protobuf.CodedInputStream input) throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
            }

            //      public static Builder newBuilder() {
            //        return (Builder) DEFAULT_INSTANCE.createBuilder();
            //      }
            public static Layer.Builder newBuilder() {
                return DEFAULT_INSTANCE.createBuilder();
            }

            public static Builder newBuilder(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer prototype) {
                return DEFAULT_INSTANCE.createBuilder(prototype);
            }

            /**
             * <pre>
             * Layers are described in section 4.1 of the specification
             * </pre>
             *
             * Protobuf type {@code io.tileverse.vectortile.mvt.Tile.Layer}
             */
            public static final class Builder
                    extends com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer, Builder>
                    implements
                    // @@protoc_insertion_point(builder_implements:io.tileverse.vectortile.mvt.Tile.Layer)
                    io.tileverse.vectortile.mvt.VectorTileProto.Tile.LayerOrBuilder {
                // Construct using io.tileverse.vectortile.mvt.VectorTile.Tile.Layer.newBuilder()
                private Builder() {
                    super(DEFAULT_INSTANCE);
                }

                /**
                 * <pre>
                 * Any compliant implementation must first read the version
                 * number encoded in this message and choose the correct
                 * implementation for this version number before proceeding to
                 * decode other parts of this message.
                 * </pre>
                 *
                 * <code>required uint32 version = 15 [default = 1];</code>
                 * @return Whether the version field is set.
                 */
                @java.lang.Override
                public boolean hasVersion() {
                    return instance.hasVersion();
                }
                /**
                 * <pre>
                 * Any compliant implementation must first read the version
                 * number encoded in this message and choose the correct
                 * implementation for this version number before proceeding to
                 * decode other parts of this message.
                 * </pre>
                 *
                 * <code>required uint32 version = 15 [default = 1];</code>
                 * @return The version.
                 */
                @java.lang.Override
                public int getVersion() {
                    return instance.getVersion();
                }
                /**
                 * <pre>
                 * Any compliant implementation must first read the version
                 * number encoded in this message and choose the correct
                 * implementation for this version number before proceeding to
                 * decode other parts of this message.
                 * </pre>
                 *
                 * <code>required uint32 version = 15 [default = 1];</code>
                 * @param value The version to set.
                 * @return This builder for chaining.
                 */
                public Builder setVersion(int value) {
                    copyOnWrite();
                    instance.setVersion(value);
                    return this;
                }
                /**
                 * <pre>
                 * Any compliant implementation must first read the version
                 * number encoded in this message and choose the correct
                 * implementation for this version number before proceeding to
                 * decode other parts of this message.
                 * </pre>
                 *
                 * <code>required uint32 version = 15 [default = 1];</code>
                 * @return This builder for chaining.
                 */
                public Builder clearVersion() {
                    copyOnWrite();
                    instance.clearVersion();
                    return this;
                }

                /**
                 * <code>required string name = 1;</code>
                 * @return Whether the name field is set.
                 */
                @java.lang.Override
                public boolean hasName() {
                    return instance.hasName();
                }
                /**
                 * <code>required string name = 1;</code>
                 * @return The name.
                 */
                @java.lang.Override
                public java.lang.String getName() {
                    return instance.getName();
                }
                /**
                 * <code>required string name = 1;</code>
                 * @return The bytes for name.
                 */
                @java.lang.Override
                public com.google.protobuf.ByteString getNameBytes() {
                    return instance.getNameBytes();
                }
                /**
                 * <code>required string name = 1;</code>
                 * @param value The name to set.
                 * @return This builder for chaining.
                 */
                public Builder setName(java.lang.String value) {
                    copyOnWrite();
                    instance.setName(value);
                    return this;
                }
                /**
                 * <code>required string name = 1;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearName() {
                    copyOnWrite();
                    instance.clearName();
                    return this;
                }
                /**
                 * <code>required string name = 1;</code>
                 * @param value The bytes for name to set.
                 * @return This builder for chaining.
                 */
                public Builder setNameBytes(com.google.protobuf.ByteString value) {
                    copyOnWrite();
                    instance.setNameBytes(value);
                    return this;
                }

                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                @java.lang.Override
                public java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature> getFeaturesList() {
                    return java.util.Collections.unmodifiableList(instance.getFeaturesList());
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                @java.lang.Override
                public int getFeaturesCount() {
                    return instance.getFeaturesCount();
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                @java.lang.Override
                public io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature getFeatures(int index) {
                    return instance.getFeatures(index);
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder setFeatures(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature value) {
                    copyOnWrite();
                    instance.setFeatures(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder setFeatures(
                        int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature.Builder builderForValue) {
                    copyOnWrite();
                    instance.setFeatures(index, builderForValue.build());
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder addFeatures(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature value) {
                    copyOnWrite();
                    instance.addFeatures(value);
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder addFeatures(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature value) {
                    copyOnWrite();
                    instance.addFeatures(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder addFeatures(
                        io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature.Builder builderForValue) {
                    copyOnWrite();
                    instance.addFeatures(builderForValue.build());
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder addFeatures(
                        int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature.Builder builderForValue) {
                    copyOnWrite();
                    instance.addFeatures(index, builderForValue.build());
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder addAllFeatures(
                        java.lang.Iterable<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature> values) {
                    copyOnWrite();
                    instance.addAllFeatures(values);
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder clearFeatures() {
                    copyOnWrite();
                    instance.clearFeatures();
                    return this;
                }
                /**
                 * <pre>
                 * The actual features in this tile.
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Feature features = 2;</code>
                 */
                public Builder removeFeatures(int index) {
                    copyOnWrite();
                    instance.removeFeatures(index);
                    return this;
                }

                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @return A list containing the keys.
                 */
                @java.lang.Override
                public java.util.List<java.lang.String> getKeysList() {
                    return java.util.Collections.unmodifiableList(instance.getKeysList());
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @return The count of keys.
                 */
                @java.lang.Override
                public int getKeysCount() {
                    return instance.getKeysCount();
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @param index The index of the element to return.
                 * @return The keys at the given index.
                 */
                @java.lang.Override
                public java.lang.String getKeys(int index) {
                    return instance.getKeys(index);
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @param index The index of the value to return.
                 * @return The bytes of the keys at the given index.
                 */
                @java.lang.Override
                public com.google.protobuf.ByteString getKeysBytes(int index) {
                    return instance.getKeysBytes(index);
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @param index The index to set the value at.
                 * @param value The keys to set.
                 * @return This builder for chaining.
                 */
                public Builder setKeys(int index, java.lang.String value) {
                    copyOnWrite();
                    instance.setKeys(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @param value The keys to add.
                 * @return This builder for chaining.
                 */
                public Builder addKeys(java.lang.String value) {
                    copyOnWrite();
                    instance.addKeys(value);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @param values The keys to add.
                 * @return This builder for chaining.
                 */
                public Builder addAllKeys(java.lang.Iterable<java.lang.String> values) {
                    copyOnWrite();
                    instance.addAllKeys(values);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @return This builder for chaining.
                 */
                public Builder clearKeys() {
                    copyOnWrite();
                    instance.clearKeys();
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for keys
                 * </pre>
                 *
                 * <code>repeated string keys = 3;</code>
                 * @param value The bytes of the keys to add.
                 * @return This builder for chaining.
                 */
                public Builder addKeysBytes(com.google.protobuf.ByteString value) {
                    copyOnWrite();
                    instance.addKeysBytes(value);
                    return this;
                }

                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                @java.lang.Override
                public java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> getValuesList() {
                    return java.util.Collections.unmodifiableList(instance.getValuesList());
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                @java.lang.Override
                public int getValuesCount() {
                    return instance.getValuesCount();
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                @java.lang.Override
                public io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value getValues(int index) {
                    return instance.getValues(index);
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder setValues(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value value) {
                    copyOnWrite();
                    instance.setValues(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder setValues(
                        int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value.Builder builderForValue) {
                    copyOnWrite();
                    instance.setValues(index, builderForValue.build());
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder addValues(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value value) {
                    copyOnWrite();
                    instance.addValues(value);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder addValues(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value value) {
                    copyOnWrite();
                    instance.addValues(index, value);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder addValues(
                        io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value.Builder builderForValue) {
                    copyOnWrite();
                    instance.addValues(builderForValue.build());
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder addValues(
                        int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value.Builder builderForValue) {
                    copyOnWrite();
                    instance.addValues(index, builderForValue.build());
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder addAllValues(
                        java.lang.Iterable<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value> values) {
                    copyOnWrite();
                    instance.addAllValues(values);
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder clearValues() {
                    copyOnWrite();
                    instance.clearValues();
                    return this;
                }
                /**
                 * <pre>
                 * Dictionary encoding for values
                 * </pre>
                 *
                 * <code>repeated .io.tileverse.vectortile.mvt.Tile.Value values = 4;</code>
                 */
                public Builder removeValues(int index) {
                    copyOnWrite();
                    instance.removeValues(index);
                    return this;
                }

                /**
                 * <pre>
                 * Although this is an "optional" field it is required by the specification.
                 * See https://github.com/mapbox/vector-tile-spec/issues/47
                 * </pre>
                 *
                 * <code>optional uint32 extent = 5 [default = 4096];</code>
                 * @return Whether the extent field is set.
                 */
                @java.lang.Override
                public boolean hasExtent() {
                    return instance.hasExtent();
                }
                /**
                 * <pre>
                 * Although this is an "optional" field it is required by the specification.
                 * See https://github.com/mapbox/vector-tile-spec/issues/47
                 * </pre>
                 *
                 * <code>optional uint32 extent = 5 [default = 4096];</code>
                 * @return The extent.
                 */
                @java.lang.Override
                public int getExtent() {
                    return instance.getExtent();
                }
                /**
                 * <pre>
                 * Although this is an "optional" field it is required by the specification.
                 * See https://github.com/mapbox/vector-tile-spec/issues/47
                 * </pre>
                 *
                 * <code>optional uint32 extent = 5 [default = 4096];</code>
                 * @param value The extent to set.
                 * @return This builder for chaining.
                 */
                public Builder setExtent(int value) {
                    copyOnWrite();
                    instance.setExtent(value);
                    return this;
                }
                /**
                 * <pre>
                 * Although this is an "optional" field it is required by the specification.
                 * See https://github.com/mapbox/vector-tile-spec/issues/47
                 * </pre>
                 *
                 * <code>optional uint32 extent = 5 [default = 4096];</code>
                 * @return This builder for chaining.
                 */
                public Builder clearExtent() {
                    copyOnWrite();
                    instance.clearExtent();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:io.tileverse.vectortile.mvt.Tile.Layer)
            }

            private byte memoizedIsInitialized = 2;

            @java.lang.Override
            @java.lang.SuppressWarnings({"ThrowNull"})
            protected final java.lang.Object dynamicMethod(
                    com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                    java.lang.Object arg0,
                    java.lang.Object arg1) {
                switch (method) {
                    case NEW_MUTABLE_INSTANCE: {
                        return new io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer();
                    }
                    case NEW_BUILDER: {
                        return new Builder();
                    }
                    case BUILD_MESSAGE_INFO: {
                        java.lang.Object[] objects = new java.lang.Object[] {
                            "bitField0_",
                            "name_",
                            "features_",
                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Feature.class,
                            "keys_",
                            "values_",
                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Value.class,
                            "extent_",
                            "version_",
                        };
                        java.lang.String info =
                                "\u0001\u0006\u0000\u0001\u0001\u000f\u0006\u0000\u0003\u0003\u0001\u1508\u0001\u0002"
                                        + "\u001b\u0003\u001a\u0004\u041b\u0005\u100b\u0002\u000f\u150b\u0000";
                        return newMessageInfo(DEFAULT_INSTANCE, info, objects);
                    }
                    case GET_DEFAULT_INSTANCE: {
                        return DEFAULT_INSTANCE;
                    }
                    case GET_PARSER: {
                        com.google.protobuf.Parser<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> parser =
                                PARSER;
                        if (parser == null) {
                            synchronized (io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer.class) {
                                parser = PARSER;
                                if (parser == null) {
                                    parser = new DefaultInstanceBasedParser<
                                            io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer>(DEFAULT_INSTANCE);
                                    PARSER = parser;
                                }
                            }
                        }
                        return parser;
                    }
                    case GET_MEMOIZED_IS_INITIALIZED: {
                        return memoizedIsInitialized;
                    }
                    case SET_MEMOIZED_IS_INITIALIZED: {
                        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
                        return null;
                    }
                }
                // Should never happen. Generates tight code to throw an exception.
                throw null;
            }

            // @@protoc_insertion_point(class_scope:io.tileverse.vectortile.mvt.Tile.Layer)
            private static final io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer DEFAULT_INSTANCE;

            static {
                Layer defaultInstance = new Layer();
                // New instances are implicitly immutable so no need to make
                // immutable.
                DEFAULT_INSTANCE = defaultInstance;
                com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(Layer.class, defaultInstance);
            }

            public static io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static volatile com.google.protobuf.Parser<Layer> PARSER;

            public static com.google.protobuf.Parser<Layer> parser() {
                return DEFAULT_INSTANCE.getParserForType();
            }
        }

        public static final int LAYERS_FIELD_NUMBER = 3;
        private com.google.protobuf.Internal.ProtobufList<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer>
                layers_;
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        @java.lang.Override
        public java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> getLayersList() {
            return layers_;
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        public java.util.List<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.LayerOrBuilder>
                getLayersOrBuilderList() {
            return layers_;
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        @java.lang.Override
        public int getLayersCount() {
            return layers_.size();
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        @java.lang.Override
        public io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer getLayers(int index) {
            return layers_.get(index);
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        public io.tileverse.vectortile.mvt.VectorTileProto.Tile.LayerOrBuilder getLayersOrBuilder(int index) {
            return layers_.get(index);
        }

        private void ensureLayersIsMutable() {
            com.google.protobuf.Internal.ProtobufList<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> tmp =
                    layers_;
            if (!tmp.isModifiable()) {
                layers_ = com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
            }
        }

        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void setLayers(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer value) {
            value.getClass(); // minimal bytecode null check
            ensureLayersIsMutable();
            layers_.set(index, value);
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void addLayers(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer value) {
            value.getClass(); // minimal bytecode null check
            ensureLayersIsMutable();
            layers_.add(value);
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void addLayers(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer value) {
            value.getClass(); // minimal bytecode null check
            ensureLayersIsMutable();
            layers_.add(index, value);
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        private void addAllLayers(
                java.lang.Iterable<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> values) {
            ensureLayersIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(values, layers_);
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        private void clearLayers() {
            layers_ = emptyProtobufList();
        }
        /**
         * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
         */
        private void removeLayers(int index) {
            ensureLayersIsMutable();
            layers_.remove(index);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(
                java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(
                com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(
                byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(
                java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseDelimitedFrom(
                java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(
                com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile parseFrom(
                com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        //    public static Builder newBuilder() {
        //      return (Builder) DEFAULT_INSTANCE.createBuilder();
        //    }
        public static Tile.Builder newBuilder() {
            return DEFAULT_INSTANCE.createBuilder();
        }

        public static Builder newBuilder(io.tileverse.vectortile.mvt.VectorTileProto.Tile prototype) {
            return DEFAULT_INSTANCE.createBuilder(prototype);
        }

        /**
         * Protobuf type {@code io.tileverse.vectortile.mvt.Tile}
         */
        public static final class Builder
                extends com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
                        io.tileverse.vectortile.mvt.VectorTileProto.Tile, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:io.tileverse.vectortile.mvt.Tile)
                io.tileverse.vectortile.mvt.VectorTileProto.TileOrBuilder {
            // Construct using io.tileverse.vectortile.mvt.VectorTile.Tile.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }

            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            @java.lang.Override
            public java.util.List<io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> getLayersList() {
                return java.util.Collections.unmodifiableList(instance.getLayersList());
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            @java.lang.Override
            public int getLayersCount() {
                return instance.getLayersCount();
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            @java.lang.Override
            public io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer getLayers(int index) {
                return instance.getLayers(index);
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder setLayers(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer value) {
                copyOnWrite();
                instance.setLayers(index, value);
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder setLayers(
                    int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer.Builder builderForValue) {
                copyOnWrite();
                instance.setLayers(index, builderForValue.build());
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder addLayers(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer value) {
                copyOnWrite();
                instance.addLayers(value);
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder addLayers(int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer value) {
                copyOnWrite();
                instance.addLayers(index, value);
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder addLayers(io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer.Builder builderForValue) {
                copyOnWrite();
                instance.addLayers(builderForValue.build());
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder addLayers(
                    int index, io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer.Builder builderForValue) {
                copyOnWrite();
                instance.addLayers(index, builderForValue.build());
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder addAllLayers(
                    java.lang.Iterable<? extends io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer> values) {
                copyOnWrite();
                instance.addAllLayers(values);
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder clearLayers() {
                copyOnWrite();
                instance.clearLayers();
                return this;
            }
            /**
             * <code>repeated .io.tileverse.vectortile.mvt.Tile.Layer layers = 3;</code>
             */
            public Builder removeLayers(int index) {
                copyOnWrite();
                instance.removeLayers(index);
                return this;
            }

            // @@protoc_insertion_point(builder_scope:io.tileverse.vectortile.mvt.Tile)
        }

        private byte memoizedIsInitialized = 2;

        @java.lang.Override
        @java.lang.SuppressWarnings({"ThrowNull"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0,
                java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new io.tileverse.vectortile.mvt.VectorTileProto.Tile();
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case BUILD_MESSAGE_INFO: {
                    java.lang.Object[] objects = new java.lang.Object[] {
                        "layers_", io.tileverse.vectortile.mvt.VectorTileProto.Tile.Layer.class,
                    };
                    java.lang.String info = "\u0001\u0001\u0000\u0000\u0003\u0003\u0001\u0000\u0001\u0001\u0003\u041b";
                    return newMessageInfo(DEFAULT_INSTANCE, info, objects);
                }
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    com.google.protobuf.Parser<io.tileverse.vectortile.mvt.VectorTileProto.Tile> parser = PARSER;
                    if (parser == null) {
                        synchronized (io.tileverse.vectortile.mvt.VectorTileProto.Tile.class) {
                            parser = PARSER;
                            if (parser == null) {
                                parser = new DefaultInstanceBasedParser<
                                        io.tileverse.vectortile.mvt.VectorTileProto.Tile>(DEFAULT_INSTANCE);
                                PARSER = parser;
                            }
                        }
                    }
                    return parser;
                }
                case GET_MEMOIZED_IS_INITIALIZED: {
                    return memoizedIsInitialized;
                }
                case SET_MEMOIZED_IS_INITIALIZED: {
                    memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
                    return null;
                }
            }
            // Should never happen. Generates tight code to throw an exception.
            throw null;
        }

        // @@protoc_insertion_point(class_scope:io.tileverse.vectortile.mvt.Tile)
        private static final io.tileverse.vectortile.mvt.VectorTileProto.Tile DEFAULT_INSTANCE;

        static {
            Tile defaultInstance = new Tile();
            // New instances are implicitly immutable so no need to make
            // immutable.
            DEFAULT_INSTANCE = defaultInstance;
            com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(Tile.class, defaultInstance);
        }

        public static io.tileverse.vectortile.mvt.VectorTileProto.Tile getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<Tile> PARSER;

        public static com.google.protobuf.Parser<Tile> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }
    }

    static {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
